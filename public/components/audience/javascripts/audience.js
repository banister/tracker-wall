// Generated by CommonJS Everywhere 0.9.4
(function (global) {
  function require(file, parentModule) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
        id: file,
        require: require,
        filename: file,
        exports: {},
        loaded: false,
        parent: parentModule,
        children: []
      };
    if (parentModule)
      parentModule.children.push(module$);
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports;
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
  };
  require.define = function (file, fn) {
    require.modules[file] = fn;
  };
  var process = function () {
      var cwd = '/';
      return {
        title: 'browser',
        version: 'v0.8.18',
        browser: true,
        env: {},
        argv: [],
        nextTick: global.setImmediate || function (fn) {
          setTimeout(fn, 0);
        },
        cwd: function () {
          return cwd;
        },
        chdir: function (dir) {
          cwd = dir;
        }
      };
    }();
  require.define('/audience.coffee', function (module, exports, __dirname, __filename) {
    var Audience;
    Audience = {
      DOMMappings: require('/dom_mappings.coffee', module),
      Page: require('/page.coffee', module),
      Element: require('/element.coffee', module),
      Message: require('/message.coffee', module),
      Spy: require('/spy.coffee', module)
    };
    module.exports = Audience;
  });
  require.define('/spy.coffee', function (module, exports, __dirname, __filename) {
    var DOMMappings, Element, Message, Page, Spy;
    DOMMappings = require('/dom_mappings.coffee', module);
    Page = require('/page.coffee', module);
    Element = require('/element.coffee', module);
    Message = require('/message.coffee', module);
    Spy = function () {
      function Spy(options) {
        var instance$;
        instance$ = this;
        this.registerableMappings = function (a) {
          return Spy.prototype.registerableMappings.apply(instance$, arguments);
        };
        this.register = function (a) {
          return Spy.prototype.register.apply(instance$, arguments);
        };
        this.mutationHandler = function (a) {
          return Spy.prototype.mutationHandler.apply(instance$, arguments);
        };
        this.inform = function (a) {
          return Spy.prototype.inform.apply(instance$, arguments);
        };
        if (null == options)
          options = {};
        this.domMappings = options.domMappings || DOMMappings;
        this.page = new Page;
        this.handle = options.handler || function (message) {
          return console.log('A message was handled: ' + message);
        };
      }
      Spy.prototype.inform = function (event) {
        var message;
        message = new Message({
          domMappings: this.domMappings,
          page: this.page,
          fragment: this.fragment,
          element: new Element(event.target, event.type)
        });
        return this.handle(message);
      };
      Spy.prototype.listen = function (selector) {
        var config, observer;
        this.fragment = document.querySelector(selector || 'body');
        config = {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        };
        observer = new MutationObserver(this.mutationHandler);
        return observer.observe(this.fragment, config);
      };
      Spy.prototype.mutationHandler = function (mutations) {
        return function (accum$) {
          var mutation;
          for (var i$ = 0, length$ = mutations.length; i$ < length$; ++i$) {
            mutation = mutations[i$];
            accum$.push(this.register(mutation.addedNodes));
          }
          return accum$;
        }.call(this, []);
      };
      Spy.prototype.register = function (nodes) {
        var category, element, event;
        for (var i$ = 0, length$ = nodes.length; i$ < length$; ++i$) {
          element = nodes[i$];
          if (element.childNodes.length > 0)
            this.register(element.childNodes);
          for (event in this.registerableMappings(element)) {
            category = this.registerableMappings(element)[event];
            element.addEventListener(event, this.inform, false);
          }
        }
        return nodes;
      };
      Spy.prototype.matchSelector = function (element, mapping) {
        if (mapping['class']) {
          return in$(mapping['class'], element.className.split(' '));
        } else {
          return true;
        }
      };
      Spy.prototype.registerableMappings = function (element) {
        var mapping;
        mapping = this.domMappings[element.tagName];
        if (mapping && this.matchSelector(element, mapping)) {
          return mapping.events;
        } else {
          return {};
        }
      };
      return Spy;
    }();
    module.exports = Spy;
    function in$(member, list) {
      for (var i = 0, length = list.length; i < length; ++i)
        if (i in list && list[i] === member)
          return true;
      return false;
    }
  });
  require.define('/message.coffee', function (module, exports, __dirname, __filename) {
    var Element, Message;
    Element = require('/element.coffee', module);
    Message = function () {
      function Message(options) {
        var instance$;
        instance$ = this;
        this.fullName = function () {
          return Message.prototype.fullName.apply(instance$, arguments);
        };
        this.page = options.page;
        this.element = options.element;
        this.tagName = this.element.tagName;
        this.domMappings = options.domMappings;
        this.fragment = options.fragment;
        this.timestamp = +new Date;
      }
      Message.prototype.category = function () {
        return this.domMappings[this.tagName] && this.domMappings[this.tagName][this.element.type];
      };
      Message.prototype.classesOf = function (element) {
        if (null == element)
          element = this.element;
        return Element.classesOf(element.base);
      };
      Message.prototype.eventType = function () {
        return this.element.type;
      };
      Message.prototype.fullName = function () {
        var path;
        path = '' + this.element.tagName;
        return path;
      };
      Message.prototype.id = function () {
        return this.element.id;
      };
      Message.prototype.recursivelyWalkUp = function (elements, element) {
        var selectorPath;
        if (null == elements)
          elements = [];
        if (null == element)
          element = this.element;
        if (element)
          if (element.id === '') {
            selectorPath = this.selectorPathFor(element);
            if ('function' === typeof this.selectorWorthy ? this.selectorWorthy(selectorPath) : void 0)
              elements.unshift(selectorPath);
            this.recursivelyWalkUp(elements, new Element(element.base.parentNode));
          } else if (element.base !== this.fragment) {
            elements.unshift('' + element.tagName + '#' + element.id);
          }
        return elements;
      };
      Message.prototype.selector = function () {
        return this.recursivelyWalkUp().join(' ');
      };
      Message.prototype.selectorPathFor = function (element) {
        var classArray, path;
        if (null == element)
          element = this.element;
        classArray = this.classesOf(element);
        path = element.tagName;
        if (element.id)
          path += '#' + element.id;
        if (classArray.length > 0)
          path += '.' + classArray.join('.');
        return path;
      };
      Message.prototype.selectorWorthy = function (selectorPath) {
        return selectorPath !== 'DIV' && selectorPath !== 'SMALL' && selectorPath !== 'P' && selectorPath !== 'LABEL';
      };
      Message.prototype.text = function () {
        return this.element.base.text;
      };
      Message.prototype.toObject = function () {
        var message;
        return message = {
          category: this.category(),
          classes: this.classesOf(),
          element: this.tagName,
          eventType: this.eventType(),
          fullName: this.fullName(),
          id: this.id(),
          page: this.page,
          selector: this.selector(),
          text: this.text(),
          timestamp: this.timestamp,
          value: this.value()
        };
      };
      Message.prototype.value = function () {
        return this.element.base.value;
      };
      return Message;
    }();
    module.exports = Message;
    function in$(member, list) {
      for (var i = 0, length = list.length; i < length; ++i)
        if (i in list && list[i] === member)
          return true;
      return false;
    }
  });
  require.define('/element.coffee', function (module, exports, __dirname, __filename) {
    var Element;
    Element = function () {
      function Element(element, type) {
        this.base = element;
        this.id = element.id;
        this.classes = this.constructor.classesOf(element);
        this.tagName = element.tagName;
        this.type = type;
      }
      Element.classesOf = function (element) {
        var classes;
        classes = element.classList.toString().trim();
        if (classes === '') {
          return [];
        } else {
          return classes.split(' ');
        }
      };
      return Element;
    }();
    module.exports = Element;
    function in$(member, list) {
      for (var i = 0, length = list.length; i < length; ++i)
        if (i in list && list[i] === member)
          return true;
      return false;
    }
  });
  require.define('/page.coffee', function (module, exports, __dirname, __filename) {
    var Page;
    Page = function () {
      function Page(options) {
        if (null == options)
          options = {};
        this.location = options.location || location;
        this.timestamp = options.timestampe || +new Date;
      }
      return Page;
    }();
    module.exports = Page;
    function in$(member, list) {
      for (var i = 0, length = list.length; i < length; ++i)
        if (i in list && list[i] === member)
          return true;
      return false;
    }
  });
  require.define('/dom_mappings.coffee', function (module, exports, __dirname, __filename) {
    var DOMMappings;
    DOMMappings = {
      A: {
        events: {
          click: 'CLICK',
          mouseover: 'HOVER'
        }
      },
      BUTTON: {
        events: {
          click: 'CLICK',
          mouseover: 'HOVER'
        }
      },
      FORM: { events: { submit: 'SUBMIT' } },
      IMG: { events: { mouseover: 'HOVER' } },
      INPUT: {
        events: {
          click: 'CLICK',
          mouseover: 'HOVER',
          submit: 'SUBMIT'
        }
      },
      SELECT: {
        events: {
          change: 'CHANGE',
          click: 'CLICK',
          mouseover: 'HOVER'
        }
      },
      TEXTAREA: {
        events: {
          click: 'CLICK',
          mouseover: 'HOVER'
        }
      }
    };
    module.exports = DOMMappings;
    function in$(member, list) {
      for (var i = 0, length = list.length; i < length; ++i)
        if (i in list && list[i] === member)
          return true;
      return false;
    }
  });
  global.Audience = require('/audience.coffee');
}.call(this, this));