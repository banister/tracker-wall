// Generated by CoffeeScript 1.6.3
(function() {
  var Iteration, IterationsCollection, KanbanView, Project, ProjectsCollection, ProjectsView, Story, StoryView, StoryWall, TokenView, TrackerApplication, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Project = (function(_super) {
    __extends(Project, _super);

    function Project() {
      _ref = Project.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Project.prototype.initialize = function(options) {
      this.constructor.__super__.initialize.apply(this, [options]);
      return this.iterationsCollection = new IterationsCollection(this);
    };

    Project.prototype.fetchIterations = function(options) {
      return this.iterationsCollection.fetch({
        data: {
          token: TrackerApplication.token(),
          scope: options['scope']
        }
      });
    };

    return Project;

  })(Backbone.Model);

  ProjectsCollection = (function(_super) {
    __extends(ProjectsCollection, _super);

    function ProjectsCollection() {
      _ref1 = ProjectsCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ProjectsCollection.prototype.model = Project;

    ProjectsCollection.prototype.url = "https://www.pivotaltracker.com/services/v5/projects";

    return ProjectsCollection;

  })(Backbone.Collection);

  Iteration = (function(_super) {
    __extends(Iteration, _super);

    function Iteration() {
      _ref2 = Iteration.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Iteration.prototype.currentStories = function() {
      return _.map(get('stories'), function(story) {
        return new Story(story.toJSON());
      });
    };

    return Iteration;

  })(Backbone.Model);

  IterationsCollection = (function(_super) {
    __extends(IterationsCollection, _super);

    function IterationsCollection() {
      _ref3 = IterationsCollection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    IterationsCollection.prototype.model = Iteration;

    IterationsCollection.prototype.url = "https://www.pivotaltracker.com/services/v5/projects/:project_id/iterations";

    IterationsCollection.prototype.initialize = function(project) {
      this.project = project;
      return this.url = this.url.replace(":project_id", project.get('id'));
    };

    return IterationsCollection;

  })(Backbone.Collection);

  Story = (function(_super) {
    var ACCEPTED, BLOCKED, BUG, CHORE, DELIVERED, FEATURE, FINISHED, ONCALL, RELEASE, STARTED, UNSTARTED;

    __extends(Story, _super);

    function Story() {
      _ref4 = Story.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    BUG = "bug";

    CHORE = "chore";

    FEATURE = "feature";

    RELEASE = "release";

    UNSTARTED = "unstarted";

    STARTED = "started";

    FINISHED = "finished";

    DELIVERED = "delivered";

    ACCEPTED = "accepted";

    BLOCKED = "blocked";

    ONCALL = "old-on-call";

    Story.prototype.feature = function() {
      return this.get('story_type') === FEATURE;
    };

    Story.prototype.mark = function() {
      if (this.feature != null) {
        return this.get('estimate');
      } else {
        return this.get('story_type').charAt(0).toUpperCase();
      }
    };

    Story.prototype.onCall = function() {
      var label, labels, _i, _len, _ref5;
      _ref5 = this.get('labels');
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        label = _ref5[_i];
        if (label.name === ONCALL) {
          labels = label;
        }
      }
      return !!labels;
    };

    Story.prototype.status = function() {
      var state;
      state = this.get('current_state');
      if (state === UNSTARTED) {
        return 'current';
      } else if (state === STARTED || state === FINISHED) {
        return 'development';
      } else if (state === DELIVERED) {
        return 'test';
      } else if (state === ACCEPTED) {
        return 'complete';
      }
    };

    Story.prototype.type = function() {
      if (this.onCall()) {
        return 'on-call';
      } else {
        return this.get('story_type');
      }
    };

    return Story;

  })(Backbone.Model);

  ProjectsView = (function(_super) {
    __extends(ProjectsView, _super);

    function ProjectsView() {
      _ref5 = ProjectsView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    ProjectsView.prototype.el = '#projects';

    ProjectsView.prototype.tagName = 'ul';

    ProjectsView.prototype.initialize = function() {
      var _this = this;
      this.projectsCollection = new ProjectsCollection;
      return this.projectsCollection.on("add", function(model) {
        return _this.addProject(model);
      });
    };

    ProjectsView.prototype.addProject = function(model) {
      var project,
        _this = this;
      project = $("<li><a data-cid='" + model.cid + "' data-id='" + (model.get('id')) + "' href='#'>" + (model.get('name')) + "</a></li>");
      project.find('a').click(function() {
        return _this.trigger('project-selected', model);
      });
      return this.$el.append(project);
    };

    ProjectsView.prototype.render = function() {
      this.projectsCollection.fetch({
        data: {
          token: TrackerApplication.token()
        }
      });
      this.$el.show();
      return this;
    };

    return ProjectsView;

  })(Backbone.View);

  TokenView = (function(_super) {
    __extends(TokenView, _super);

    function TokenView() {
      this.submitApiToken = __bind(this.submitApiToken, this);
      _ref6 = TokenView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    TokenView.prototype.el = '#token';

    TokenView.prototype.tagName = 'form';

    TokenView.prototype.initialize = function() {
      this.$el.find('#token-submit').click(this.submitApiToken);
      return this;
    };

    TokenView.prototype.render = function() {
      this.$el.show();
      return this;
    };

    TokenView.prototype.submitApiToken = function(element) {
      document.cookie = "pivotal-api-token=" + (this.$el.find('input.api-token').val());
      this.trigger('token-stored');
      return this.$el.hide();
    };

    return TokenView;

  })(Backbone.View);

  StoryWall = (function(_super) {
    __extends(StoryWall, _super);

    function StoryWall() {
      _ref7 = StoryWall.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    StoryWall.prototype.tagName = 'ol';

    StoryWall.prototype.className = 'stickies';

    return StoryWall;

  })(Backbone.View);

  StoryView = (function(_super) {
    __extends(StoryView, _super);

    function StoryView() {
      _ref8 = StoryView.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    StoryView.prototype.tagName = 'li';

    StoryView.prototype.className = 'story';

    StoryView.prototype.initialize = function(story) {
      return this.story = story;
    };

    StoryView.prototype.render = function() {
      var template,
        _this = this;
      template = _.template("<h5 class='complexity <%= story_type %>'><%= mark %></h5><p class='description'><%= name %></p><p class='user legend'></p><p class='user'>" + "</p>");
      this.$el.addClass(this.story.type);
      this.$el.attr('cid', this.story.cid);
      this.$el.html(template(this.story));
      this.$el.click(function(event) {
        event.stopPropagation();
        return _this.$el.zoomTo({
          closeclick: true,
          debug: true,
          root: $(document.body),
          targetsize: 0.6
        });
      });
      return this;
    };

    return StoryView;

  })(Backbone.View);

  KanbanView = (function(_super) {
    var COLUMNS;

    __extends(KanbanView, _super);

    function KanbanView() {
      this.renderTotals = __bind(this.renderTotals, this);
      this.addIterationToWall = __bind(this.addIterationToWall, this);
      _ref9 = KanbanView.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    COLUMNS = ['Current', 'Development', 'Test', 'Complete'];

    KanbanView.prototype.el = '#stories';

    KanbanView.prototype.tagName = 'section';

    KanbanView.prototype.initialize = function(project) {
      this.project = project;
      return this.totals = {
        current: 0,
        development: 0,
        test: 0,
        complete: 0
      };
    };

    KanbanView.prototype.addStory = function(story) {
      if (typeof story.feature === "function" ? story.feature() : void 0) {
        this.totals[story.status()] += +story.get('estimate');
      }
      if (this.$el.find("#story-" + (story.get('id'))).length === 0) {
        return this.$el.find("." + (story.status()) + " ol.stickies").append(new StoryView({
          id: "story-" + (story.get('id')),
          cid: story.cid,
          story_type: story.get('story_type'),
          name: story.get('name'),
          mark: story.mark(),
          type: story.type()
        }).render().el);
      }
    };

    KanbanView.prototype.addIterationToWall = function(iteration) {
      var _this = this;
      _.each(iteration.get('stories'), function(json) {
        return _this.addStory(new Story(json));
      });
      return this.renderTotals();
    };

    KanbanView.prototype.render = function() {
      this.renderBase().renderHeaders().renderStoryArea();
      this.project.iterationsCollection.on("add", this.addIterationToWall);
      this.project.fetchIterations({
        scope: 'current_backlog'
      });
      return this;
    };

    KanbanView.prototype.renderBase = function() {
      var template;
      template = _.template("<table id='project-" + (this.project.get('id')) + "' class='kanban'><thead></thead><tbody></tbody></table>");
      this.$el.html(template());
      return this;
    };

    KanbanView.prototype.renderHeaders = function() {
      var template;
      template = _.template("<tr>" + (_.map(COLUMNS, function(column) {
        return "<td class='" + (column.toLowerCase()) + " label'>" + column + "</td>";
      })) + "</tr>");
      this.$el.find('table tbody').append(template());
      return this;
    };

    KanbanView.prototype.renderStoryArea = function() {
      var template;
      template = _.template("<tr>" + (_.map(COLUMNS, function(column) {
        return "<td class='" + (column.toLowerCase()) + "'><ol class='stickies'></ol></td>";
      })) + "</tr>");
      this.$el.find('table tbody').append(template());
      return this;
    };

    KanbanView.prototype.renderTotals = function() {
      var _this = this;
      _.each(COLUMNS, function(column) {
        return _this.$el.find(".label." + (column.toLowerCase())).text("" + column + " (" + _this.totals[column.toLowerCase()] + ")");
      });
      return this;
    };

    return KanbanView;

  })(Backbone.View);

  TrackerApplication = (function(_super) {
    __extends(TrackerApplication, _super);

    function TrackerApplication() {
      _ref10 = TrackerApplication.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    TrackerApplication.prototype.el = 'body';

    TrackerApplication.prototype.tagName = 'body';

    TrackerApplication.prototype.initialize = function() {
      var _this = this;
      this.tokenView = new TokenView;
      this.tokenView.on('token-stored', function() {
        return _this.render();
      });
      this.projectsView = new ProjectsView;
      return this.projectsView.on('project-selected', function(project) {
        if (_this.$el.find("#project-" + (project.get('id'))).length === 0) {
          _this.$el.find('header h1').text(project.get('name'));
          return _this.$el.append(new KanbanView(project).render().el);
        }
      });
    };

    TrackerApplication.prototype.render = function() {
      if (TrackerApplication.token()) {
        return this.projectsView.render();
      } else {
        return this.tokenView.render();
      }
    };

    TrackerApplication.getCookie = function(value) {
      var cookie;
      cookie = _.find(document.cookie.split(';'), function(cookieString) {
        return _.find(cookieString.trim().split('='), function(key, index, cookie) {
          if (key === value) {
            return true;
          }
        });
      });
      if (cookie) {
        return _.last(cookie.split('='));
      }
    };

    TrackerApplication.token = function() {
      return TrackerApplication.getCookie('pivotal-api-token');
    };

    return TrackerApplication;

  }).call(this, Backbone.View);

  new TrackerApplication().render();

}).call(this);
